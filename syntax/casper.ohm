Casper {
  Program     =  newline* Stmt+ newline*
  Stmt        =  SimpleStmt newline+                        -- simple
              |  "while" Exp Block                          -- while
              |  "if" Exp Block
                 ("else if" Exp Block)*
                 ("else" Block)?                            -- if
              |  "for" id "from" Exp
                 "to" Exp
                 ("by" (id | numlit))? Block                -- loop
              |  Exp "if" Exp "else" Exp                    -- ternary
              |  (Type | "void") id "(" Params ")" Block    -- function
  SimpleStmt  =  Type DeclIds "=" Exps                      -- vardecl
              |  VarExps "=" Exps                           -- assign
              |  Call                                       -- call
              |  "break"                                    -- break
              |  "return" Exp?                              -- return
              |  Exp
  Block       =  ":" SimpleStmt newline                     -- small
              |  ":" newline indent Stmt+ dedent            -- large
  Exp         =  Exp "or" Exp1                              -- or
              |  Exp "and" Exp1                             -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                            -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                            -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                            -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                              -- unary
              |  Exp5
  Exp5        =  boollit
              |  numlit
              |  strlit
              |  nonelit
              |  "[" ListOf<Exp, ","> "]"                   -- list
              |  "set" "(" ListOf<Exp, ","> ")"             -- set
              |  "{" ListOf<KeyValue, ","> "}"              -- dict
              |  Call                                       -- call
              |  VarExp
              |  "(" Exp ")"                                -- parens
  KeyValue    =  Exp ":" Exp
  Call        =  VarExp "(" Args ")"
  Exps        =  NonemptyListOf<Exp, ",">
  DeclId      =  id
  DeclIds     =  NonemptyListOf<DeclId, ",">
  VarExp      =  VarExp "[" Exp "]"                         -- subscripted
              |  id                                         -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  Type id (FnType)? ("=" Exp)?
  Params      =  ListOf<Param, ",">
  Arg         =  Exp
  Args        =  ListOf<Arg, ",">
  Type        =  ( NumType | StringType | BooleanType | ListType | SetType | DictType )
  NumType     =  "num"
  StringType  =  "string"
  BooleanType =  "bool" | "boo"
  ListType    =  "list<" Type ">"
  SetType     =  "set<" Type ">"
  DictType    =  "dict<" Type "," Type ">"
  FnType      =  ":" "(" Params ")"
  keyword     =  ("while" | "if" | "else" | "return" | "break" | "and" | "or" | "is"
              |  "not" | "true" | "false" | "for" | "from" | "to" | "by" | "equals") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  nonelit     = "none"
  escape      =  "\\" ("\\" | "\"" | "n")                   -- simple
              |  "\\u{" hexDigit+ "}"                       -- codepoint
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | "is" | ">=" | ">" 
  mulop       =  "*" | "/" | "//" | "%"
  prefixop    =  "-" | "not" | "!"
  indent      =  "⇨"
  dedent      =  "⇦"
  newline     =  "\n"+
  space      :=  " " | "\t" | comment
  comment     =  "~" ~"*" (~"\n" any)*                      -- singleline
              |  "~*" (~"*~" any)* "*~"                     -- multiline
}