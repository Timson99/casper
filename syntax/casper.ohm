helloCasper {
  Program     =  newline* Stmt+ newline*
  Stmt        =  SingleStmt newline                   -- simple
              |  "while" Exp  Block                   -- while
              |  "if" Exp  Block
                 ("else if" Exp Block)*
                 ("else" Block)?                      -- if
              |  "from" Exp 
                 "to" Exp 
                 ("by" (id | numlit))? Block          -- loop   
              |  "do" Exp "if" Exp "else" Exp         -- ternary
              |  Type id "(" Params ")" Block         -- function
  SingleStmt  =  Ids "=" Exps                         -- vardecl
              |  VarExps "=" Exps                     -- assign
              |  Call                                 -- call
              |  "stop"                               -- break
              |  "return" Exp?                        -- return
              |  Exp
  Block       =  ":" SingleStmt newline               -- small
              |  ":" newline indent Stmt+ dedent      -- large
  Exp         =  Exp "or" Exp1                        -- or
              |  Exp "and" Exp1                       -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                      -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                      -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                      -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                        -- unary
              |  Exp5
  Exp5        =  Exp6 postfixop                       -- unary
              |  Exp6 
  Exp6        =  boollit
              |  numlit
              |  strlit
              |  List                                 -- list
              |  Tuple                                -- tuple
              |  Set                                  -- set
              |  Dictionary                           -- dict
              |  Call
              |  VarExp
              |  "(" Exp ")"                          -- parens

  List        =  "[" ListOf<Exp4, ","> "]"            -- list
  Tuple       =  "(" NonemptyListOf<Exp4, ","> ")"
  Set         =  "set" "(" ListOf<Exp4, ","> ")" 
  Dictionary  =  "{" ListOf<KeyValue, ","> "}"
  KeyValue    =  (id | numlit) ":" Exp
//   Key         =  VarExp
  Call        =  VarExp "(" Args ")"
  Exps        =  NonemptyListOf<Exp, ",">
  DeclId      =  Type? id
  Ids         =  NonemptyListOf<DeclId, ",">
  VarExp      =  VarExp "[" Exp "]"                   -- subscripted
              |  id                                   -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  Type id (FnType)? ("=" Exp)? 
  Params      =  ListOf<Param, ",">
  Arg         =  Exp
  Args        =  ListOf<Arg, ",">
  Type        =  ("num" | "string" | "boolean" | "boo" | "list" | "tuple" | "set" | "dictionary" | "void")
  FnType      =  ":" "(" Params ")" 
  keyword     =  ("while" | "if" | "else" | "return" | "stop" | "and" | "not equals"
              |  "or" | "not" | "true" | "false" | "from" | "to" | "by" | "equals") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  strlit      =  "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  escape      =  "\\" ("\\" | "\"" | "n")            -- simple
              |  "\\u{" hexDigit+ "}"                -- codepoint
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "equals" | "!=" | "not equals" | ">=" | ">"
  mulop       =  "*" | "/" | "//" | "%"
  prefixop    =  "-" | "not"
  postfixop   =  "!"
  indent      =  "⇨"
  dedent      =  "⇦"

  newline     =  "\n"+
  space      :=  " " | "\t" | comment | multiline
  comment     =  "~" (~"\n" any)* 
  multiline   =  "~~" (any)* "~~"                   
}